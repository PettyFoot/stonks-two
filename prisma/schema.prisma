// Enhanced Trade Data Schema - Comprehensive Trading Information
// This schema captures all possible trade data points for professional trading analytics
//
// ⚠️  CRITICAL WARNING: PROTECTED TABLES
// The following tables contain critical data and should NEVER be deleted:
// - users: Contains Auth0 authentication data - DELETION WILL BREAK AUTH!
//
// NEVER run: prisma migrate reset (use npm run db:safe-reset instead)
// Always backup users before schema changes: npm run db:backup-users

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ⚠️  PROTECTED TABLE - NEVER DELETE! Contains Auth0 authentication data
// Use npm run db:backup-users before any schema changes
// Use npm run db:safe-reset instead of prisma migrate reset
model User {
  id            String         @id @default(cuid())
  email         String         @unique
  auth0Id       String         @unique
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  trades        Trade[]
  orders        Order[]
  dayData       DayData[]
  journalEntries JournalEntry[]
  importBatches ImportBatch[]
  csvUploadLogs CsvUploadLog[]
  
  @@map("users")
}

// Core Trade/Execution Record - Each fill is a separate record
model Trade {
  id                    String      @id @default(cuid())
  userId                String
  
  // 1. Trade Identification
  symbol                String      // Ticker symbol
  assetClass            AssetClass  @default(EQUITY)
  brokerName            String?     // Broker name
  tradeSource           TradeSource @default(IMPORTED)
  
  // 2. Order & Execution Details
  orderType             OrderType   @default(MARKET)
  side                  TradeSide   // Long/Short
  timeInForce           TimeInForce @default(DAY)
  remainingQuantity     Int?        // Remaining quantity after fill
  averageFillPrice      Decimal?    @db.Decimal(10,2) // Average price across all fills
  
  // Trade Status and Enhanced Fields
  status                TradeStatus @default(OPEN)
  avgEntryPrice         Decimal?    // Average entry price
  avgExitPrice          Decimal?    // Average exit price
  openQuantity          Int?        // Open quantity
  closeQuantity         Int?        // Close quantity
  
  // 3. Trade Timing & Duration
  entryDate             DateTime    // Entry date (same as orderFilledTime for simplicity)
  exitDate              DateTime?   // Exit date (for closed positions)
  timeInTrade           Int?        // Duration in seconds
  marketSession         MarketSession @default(REGULAR)
  holdingPeriod         HoldingPeriod @default(INTRADAY)
  
  // 4. Price Data at Entry & Exit
  entryPrice            Decimal?    @db.Decimal(10,2) // Entry price
  exitPrice             Decimal?    @db.Decimal(10,2) // Exit price
  highDuringTrade       Decimal?    @db.Decimal(10,2) // Highest price during trade
  lowDuringTrade        Decimal?    @db.Decimal(10,2) // Lowest price during trade
  
  // 5. Calculated Trade Fields (for complete trades)
  openTime              DateTime?   // When trade was opened
  closeTime             DateTime?   // When trade was closed
  quantity              Int?        // Total closed shares
  costBasis             Decimal?    @db.Decimal(10,2) // Sum of (buyQuantity * buyLimitPrice)
  proceeds              Decimal?    @db.Decimal(10,2) // Sum of (sellQuantity * sellLimitPrice)
  ordersInTrade         String[]    // List of order IDs that make up this trade - for journal queries, use Order.tradeId instead
  ordersCount           Int?        // Number of orders in this trade
  isCalculated          Boolean     @default(false) // Flag to indicate if this is a calculated trade
  
  // Legacy/Calculated Fields
  date                  DateTime    // Main trade date
  executions            Int         @default(1) // Number of partial fills
  pnl                   Decimal     @default(0) @db.Decimal(10,2) // Realized P&L
  commission            Decimal?    @db.Decimal(10,2) // Commission fees
  fees                  Decimal?    @db.Decimal(10,2) // Other fees
  notes                 String?     // User notes (final saved)
  notesChanges          String?     // Auto-saved changes (before user confirms)
  tags                  String[]    // User tags
  
  // Metadata
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  
  // Relations
  user                  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  journalEntryId        String?
  journalEntry          JournalEntry? @relation(fields: [journalEntryId], references: [id])
  importBatchId         String?
  importBatch           ImportBatch? @relation(fields: [importBatchId], references: [id])
  partialFills          PartialFill[]
  
  @@index([userId, date])
  @@index([userId, symbol])
  @@index([userId, assetClass])
  @@index([userId, side])
  @@index([userId, symbol, status])
  @@index([userId, entryPrice])
  @@index([userId, exitPrice])
  @@index([userId, quantity])
  @@index([userId, executions])
  @@index([userId, commission])
  @@index([userId, fees])
  @@index([userId, entryDate])
  @@index([userId, exitDate])
  @@index([userId, status, date])  // Optimized for journal queries filtering by status and date
  @@index([userId, date, status])  // Alternative compound index for date-first queries
  @@map("trades")
}

// Order-level information (individual order executions)
model Order {
  id                    String      @id @default(cuid())
  userId                String
  orderId               String      // External order ID
  parentOrderId         String?     // For bracket/OCO orders
  symbol                String
  orderType             OrderType
  side                  OrderSide   // Buy/Sell
  timeInForce           TimeInForce
  orderQuantity         Int         // Total order quantity
  limitPrice            Decimal?    @db.Decimal(10,2) // Limit price if applicable
  stopPrice             Decimal?    @db.Decimal(10,2) // Stop price if applicable
  orderStatus           OrderStatus
  orderPlacedTime       DateTime
  orderExecutedTime     DateTime?   // When order was executed
  orderUpdatedTime      DateTime?
  orderCancelledTime    DateTime?
  accountId             String?     // Account ID associated with order
  orderAccount          String?     // Account associated with order
  orderRoute            String?     // Route/venue for order execution
  brokerType            BrokerType  @default(GENERIC_CSV) // Broker this order came from
  tags                  String[]    // Tags for this order
  usedInTrade           Boolean     @default(false) // Whether this order has been used in trade calculation
  tradeId               String?     // ID of the calculated trade this order belongs to
  importBatchId         String?     // ID of the import batch this order came from
  
  // Relations
  user                  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  importBatch           ImportBatch? @relation(fields: [importBatchId], references: [id])
  
  @@unique([orderId, brokerType]) // Composite unique constraint
  @@index([userId, symbol])
  @@index([userId, orderStatus])
  @@index([tradeId])
  @@index([userId, tradeId])  // Optimized for journal queries fetching orders by user and trade
  @@map("orders")
}

// Partial Fill tracking for complex orders
model PartialFill {
  id                    String      @id @default(cuid())
  tradeId               String
  fillSequence          Int         // Order of fills (1, 2, 3...)
  fillQuantity          Int
  fillPrice             Decimal     @db.Decimal(10,2)
  fillTime              DateTime
  venue                 String?
  liquidityFlag         LiquidityFlag?
  
  // Relations
  trade                 Trade       @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  
  @@index([tradeId, fillSequence])
  @@map("partial_fills")
}

model DayData {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime
  pnl         Float
  trades      Int
  volume      Int
  winRate     Float?
  commissions Float?
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
  @@index([userId, date])
  @@map("day_data")
}

model JournalEntry {
  id           String    @id @default(cuid())
  userId       String
  date         DateTime
  pnl          Float
  totalTrades  Int
  totalVolume  Int
  winRate      Float?
  mfeRatio     Float?
  netPnl       Float?
  commissions  Float?
  notes        String?
  chartImage   String?   // URL to stored image
  
  // Metadata
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades       Trade[]
  
  @@index([userId, date])
  @@map("journal_entries")
}

model ImportBatch {
  id            String      @id @default(cuid())
  userId        String
  filename      String
  fileSize      Int?        // File size in bytes
  brokerType    BrokerType
  importType    ImportType  @default(STANDARD) // Track if standard or custom format
  status        ImportStatus
  totalRecords  Int         @default(0)
  successCount  Int         @default(0)
  errorCount    Int         @default(0)
  errors        Json?       // Store import errors as JSON
  
  // AI mapping data
  aiMappingUsed     Boolean @default(false)
  mappingConfidence Float?  // Overall AI mapping confidence
  columnMappings    Json?   // Store column mapping decisions
  userReviewRequired Boolean @default(false)
  
  // Background processing
  jobId         String?     // For background job tracking
  processingStarted DateTime?
  processingCompleted DateTime?
  
  // Metadata
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades        Trade[]
  orders        Order[]
  csvUploadLogs CsvUploadLog[]
  
  @@index([userId, status])
  @@index([userId, importType])
  @@map("import_batches")
}

model CsvUploadLog {
  id              String      @id @default(cuid())
  userId          String
  importBatchId   String?
  filename        String
  originalHeaders String[]    // Original CSV headers
  mappedHeaders   Json?       // Final header mappings
  rowCount        Int
  uploadStatus    UploadStatus
  errorMessage    String?
  
  // Processing details
  parseMethod     ParseMethod // STANDARD or AI_MAPPED
  aiConfidence    Float?
  userInteraction Boolean @default(false) // Did user review/correct mappings
  
  // Metadata
  createdAt       DateTime    @default(now())
  
  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  importBatch     ImportBatch? @relation(fields: [importBatchId], references: [id])
  
  @@index([userId, createdAt])
  @@map("csv_upload_logs")
}

// Enums
enum AssetClass {
  EQUITY
  FUTURES
  OPTIONS
  FOREX
  CRYPTO
  BOND
  ETF
  MUTUAL_FUND
  COMMODITY
  
  @@map("asset_class")
}

enum TradeSide {
  LONG   // Long position
  SHORT  // Short position
  
  @@map("trade_side")
}

enum TradeStatus {
  OPEN
  CLOSED
  BLANK    // For empty journal entries with notes only
  
  @@map("trade_status")
}

enum OrderSide {
  BUY
  SELL
  
  @@map("order_side")
}

enum TradeSource {
  MANUAL
  ALGORITHMIC
  API
  IMPORTED
  COPY_TRADING
  
  @@map("trade_source")
}

enum OrderType {
  MARKET
  LIMIT
  STOP
  STOP_LIMIT
  TRAILING_STOP
  MARKET_ON_CLOSE
  LIMIT_ON_CLOSE
  PEGGED_TO_MIDPOINT
  
  @@map("order_type")
}

enum TimeInForce {
  DAY
  GTC      // Good Till Cancelled
  IOC      // Immediate or Cancel
  FOK      // Fill or Kill
  GTD      // Good Till Date
  
  @@map("time_in_force")
}

enum LiquidityFlag {
  MAKER
  TAKER
  UNKNOWN
  
  @@map("liquidity_flag")
}

enum MarketSession {
  PRE_MARKET
  REGULAR
  AFTER_HOURS
  EXTENDED
  
  @@map("market_session")
}

enum HoldingPeriod {
  SCALP       // < 5 minutes
  INTRADAY    // Same day
  SWING       // 1-7 days
  POSITION    // 1-4 weeks
  LONG_TERM   // > 1 month
  
  @@map("holding_period")
}

enum OrderStatus {
  PENDING
  PARTIALLY_FILLED
  FILLED
  CANCELLED
  REJECTED
  EXPIRED
  
  @@map("order_status")
}

enum BrokerType {
  INTERACTIVE_BROKERS
  TD_AMERITRADE
  E_TRADE
  CHARLES_SCHWAB
  FIDELITY
  ROBINHOOD
  GENERIC_CSV
  
  @@map("broker_type")
}

enum ImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  
  @@map("import_status")
}

enum ImportType {
  STANDARD
  CUSTOM
  
  @@map("import_type")
}

enum UploadStatus {
  UPLOADED
  PARSING
  MAPPED
  VALIDATED
  IMPORTED
  FAILED
  
  @@map("upload_status")
}

enum ParseMethod {
  STANDARD
  AI_MAPPED
  USER_CORRECTED
  
  @@map("parse_method")
}