// Enhanced Trade Data Schema - Comprehensive Trading Information
// This schema captures all possible trade data points for professional trading analytics

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  auth0Id       String         @unique
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  trades        Trade[]
  orders        Order[]
  dayData       DayData[]
  journalEntries JournalEntry[]
  importBatches ImportBatch[]
  csvUploadLogs CsvUploadLog[]
  
  @@map("users")
}

// Core Trade/Execution Record - Each fill is a separate record
model Trade {
  id                    String      @id @default(cuid())
  userId                String
  
  // 1. Trade Identification
  tradeId               String?     // Unique trade/execution ID
  orderId               String?     // Parent order ID
  symbol                String      // Ticker symbol
  assetClass            AssetClass  @default(EQUITY)
  underlyingSymbol      String?     // For derivatives
  brokerName            String?     // Broker name
  tradeSource           TradeSource @default(IMPORTED)
  
  // 2. Order & Execution Details
  orderType             OrderType   @default(MARKET)
  side                  TradeSide   // Long/Short
  timeInForce           TimeInForce @default(DAY)
  orderFilledTime       DateTime    // When order was filled (main date/time)
  quantityFilled        Int         // Quantity filled in this execution
  remainingQuantity     Int?        // Remaining quantity after fill
  averageFillPrice      Float?      // Average price across all fills
  
  // 3. Trade Timing & Duration
  entryDate             DateTime    // Entry date (same as orderFilledTime for simplicity)
  exitDate              DateTime?   // Exit date (for closed positions)
  timeInTrade           Int?        // Duration in minutes
  marketSession         MarketSession @default(REGULAR)
  holdingPeriod         HoldingPeriod @default(INTRADAY)
  
  // 4. Price Data at Entry & Exit
  entryPrice            Float?      // Entry price
  exitPrice             Float?      // Exit price
  highDuringTrade       Float?      // Highest price during trade
  lowDuringTrade        Float?      // Lowest price during trade
  
  // Legacy/Calculated Fields
  date                  DateTime    // Main trade date
  volume                Int         // Alias for quantityFilled
  executions            Int         @default(1) // Number of partial fills
  pnl                   Float       @default(0) // Realized P&L
  price                 Float?      // Alias for fillPrice
  commission            Float?      // Commission fees
  fees                  Float?      // Other fees
  notes                 String?     // User notes
  tags                  String[]    // User tags
  
  // Metadata
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  
  // Relations
  user                  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  order                 Order?      @relation(fields: [orderId], references: [id])
  journalEntryId        String?
  journalEntry          JournalEntry? @relation(fields: [journalEntryId], references: [id])
  importBatchId         String?
  importBatch           ImportBatch? @relation(fields: [importBatchId], references: [id])
  partialFills          PartialFill[]
  
  @@index([userId, date])
  @@index([userId, symbol])
  @@index([userId, orderId])
  @@index([userId, assetClass])
  @@index([userId, side])
  @@map("trades")
}

// Order-level information (individual order executions)
model Order {
  id                    String      @id @default(cuid())
  userId                String
  orderId               String      @unique // External order ID
  parentOrderId         String?     // For bracket/OCO orders
  symbol                String
  orderType             OrderType
  side                  OrderSide   // Buy/Sell
  timeInForce           TimeInForce
  orderQuantity         Int         // Total order quantity
  limitPrice            Float?      // Limit price if applicable
  stopPrice             Float?      // Stop price if applicable
  orderStatus           OrderStatus
  orderPlacedTime       DateTime
  orderExecutedTime     DateTime?   // When order was executed
  orderUpdatedTime      DateTime?
  orderCancelledTime    DateTime?
  accountId             String?     // Account ID associated with order
  orderAccount          String?     // Account associated with order
  orderRoute            String?     // Route/venue for order execution
  tags                  String[]    // Tags for this order
  
  // Relations
  user                  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades                Trade[]     // All executions for this order
  
  @@index([userId, symbol])
  @@index([userId, orderStatus])
  @@map("orders")
}

// Partial Fill tracking for complex orders
model PartialFill {
  id                    String      @id @default(cuid())
  tradeId               String
  fillSequence          Int         // Order of fills (1, 2, 3...)
  fillQuantity          Int
  fillPrice             Float
  fillTime              DateTime
  venue                 String?
  liquidityFlag         LiquidityFlag?
  
  // Relations
  trade                 Trade       @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  
  @@index([tradeId, fillSequence])
  @@map("partial_fills")
}

model DayData {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime
  pnl         Float
  trades      Int
  volume      Int
  winRate     Float?
  commissions Float?
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
  @@index([userId, date])
  @@map("day_data")
}

model JournalEntry {
  id           String    @id @default(cuid())
  userId       String
  date         DateTime
  pnl          Float
  totalTrades  Int
  totalVolume  Int
  winRate      Float?
  mfeRatio     Float?
  netPnl       Float?
  commissions  Float?
  notes        String?
  chartImage   String?   // URL to stored image
  
  // Metadata
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades       Trade[]
  
  @@index([userId, date])
  @@map("journal_entries")
}

model ImportBatch {
  id            String      @id @default(cuid())
  userId        String
  filename      String
  fileSize      Int?        // File size in bytes
  brokerType    BrokerType
  importType    ImportType  @default(STANDARD) // Track if standard or custom format
  status        ImportStatus
  totalRecords  Int         @default(0)
  successCount  Int         @default(0)
  errorCount    Int         @default(0)
  errors        Json?       // Store import errors as JSON
  
  // AI mapping data
  aiMappingUsed     Boolean @default(false)
  mappingConfidence Float?  // Overall AI mapping confidence
  columnMappings    Json?   // Store column mapping decisions
  userReviewRequired Boolean @default(false)
  
  // Background processing
  jobId         String?     // For background job tracking
  processingStarted DateTime?
  processingCompleted DateTime?
  
  // Metadata
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades        Trade[]
  csvUploadLogs CsvUploadLog[]
  
  @@index([userId, status])
  @@index([userId, importType])
  @@map("import_batches")
}

model CsvUploadLog {
  id              String      @id @default(cuid())
  userId          String
  importBatchId   String?
  filename        String
  originalHeaders String[]    // Original CSV headers
  mappedHeaders   Json?       // Final header mappings
  rowCount        Int
  uploadStatus    UploadStatus
  errorMessage    String?
  
  // Processing details
  parseMethod     ParseMethod // STANDARD or AI_MAPPED
  aiConfidence    Float?
  userInteraction Boolean @default(false) // Did user review/correct mappings
  
  // Metadata
  createdAt       DateTime    @default(now())
  
  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  importBatch     ImportBatch? @relation(fields: [importBatchId], references: [id])
  
  @@index([userId, createdAt])
  @@map("csv_upload_logs")
}

// Enums
enum AssetClass {
  EQUITY
  FUTURES
  OPTIONS
  FOREX
  CRYPTO
  BOND
  ETF
  MUTUAL_FUND
  COMMODITY
  
  @@map("asset_class")
}

enum TradeSide {
  LONG   // Long position
  SHORT  // Short position
  
  @@map("trade_side")
}

enum OrderSide {
  BUY
  SELL
  
  @@map("order_side")
}

enum TradeSource {
  MANUAL
  ALGORITHMIC
  API
  IMPORTED
  COPY_TRADING
  
  @@map("trade_source")
}

enum OrderType {
  MARKET
  LIMIT
  STOP
  STOP_LIMIT
  TRAILING_STOP
  MARKET_ON_CLOSE
  LIMIT_ON_CLOSE
  PEGGED_TO_MIDPOINT
  
  @@map("order_type")
}

enum TimeInForce {
  DAY
  GTC      // Good Till Cancelled
  IOC      // Immediate or Cancel
  FOK      // Fill or Kill
  GTD      // Good Till Date
  
  @@map("time_in_force")
}

enum LiquidityFlag {
  MAKER
  TAKER
  UNKNOWN
  
  @@map("liquidity_flag")
}

enum MarketSession {
  PRE_MARKET
  REGULAR
  AFTER_HOURS
  EXTENDED
  
  @@map("market_session")
}

enum HoldingPeriod {
  SCALP       // < 5 minutes
  INTRADAY    // Same day
  SWING       // 1-7 days
  POSITION    // 1-4 weeks
  LONG_TERM   // > 1 month
  
  @@map("holding_period")
}

enum OrderStatus {
  PENDING
  PARTIALLY_FILLED
  FILLED
  CANCELLED
  REJECTED
  EXPIRED
  
  @@map("order_status")
}

enum BrokerType {
  INTERACTIVE_BROKERS
  TD_AMERITRADE
  E_TRADE
  CHARLES_SCHWAB
  FIDELITY
  ROBINHOOD
  GENERIC_CSV
  
  @@map("broker_type")
}

enum ImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  
  @@map("import_status")
}

enum ImportType {
  STANDARD
  CUSTOM
  
  @@map("import_type")
}

enum UploadStatus {
  UPLOADED
  PARSING
  MAPPED
  VALIDATED
  IMPORTED
  FAILED
  
  @@map("upload_status")
}

enum ParseMethod {
  STANDARD
  AI_MAPPED
  USER_CORRECTED
  
  @@map("parse_method")
}